
#include <immintrin.h>

void function(int n, double a, double *b, double c, double *d, double *e)
{
    // divide a by l outside the loop
    __m256d factor = _mm256_set1_pd(a / l);

    int i = 0;
    
    // head loop (optimized using AVX)
    for (; i <= n - 4; i += 4)
    {
        // load 4 double values from arrays b and d using AVX
        __m256d vec1 = _mm256_loadu_pd(&b[i]);
        __m256d vec2 = _mm256_loadu_pd(&d[i]);

        // perform the calculation using AVX
        vec1 = _mm256_mul_pd(factor, vec1);
        vec2 = _mm256_mul_pd(factor, vec2);
        vec1 = _mm256_add_pd(vec1, vec2);

        // store the result back to array e using AVX
        _mm256_storeu_pd(&e[i], vec1);
    }
    
    // handle the remaining elements
    for (; i < n; i++)
    {
        e[i] = a * b[i] + c * d[i];
    }
}
