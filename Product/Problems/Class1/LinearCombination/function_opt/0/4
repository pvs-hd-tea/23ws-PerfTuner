
#include <immintrin.h>

void function(int n, double a, double *b, double c, double *d, double *e)
{
    int vec_size = 4; // vec_sice = 4 since the AVX can hold 4 double values
    __m256d vec1, vec2, factor; // define variables once outside the loop

    double t_div_l = a / c; // pre-calculate the division once outside the loop

    for (int i = 0; i < n - vec_size + 1; i += vec_size) // optimized AVX loop
    {
        // load 4 consecutive double values from arrays b, d, and e
        vec1 = _mm256_loadu_pd(&b[i]);
        vec2 = _mm256_loadu_pd(&d[i]);

        // perform the multiplication and addition using AVX instructions
        vec1 = _mm256_mul_pd(vec1, _mm256_set1_pd(t_div_l));
        vec2 = _mm256_add_pd(vec2, vec1);

        // store the result back into array e
        _mm256_storeu_pd(&e[i], vec2);
    }

    // handle the remaining elements (if n is not divisible by 4)
    for (int i = (n / vec_size) * vec_size; i < n; i++)
    {
        e[i] = a * b[i] + c * d[i];
    }
}
