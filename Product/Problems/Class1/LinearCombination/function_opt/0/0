
#include <immintrin.h>

void function(int n, double a, double *b, double c, double *d, double *e)
{
    int vec_size = 4; // AVX vector size = 4 (can process 4 elements at a time)
    __m256d vec1, vec2, factor;
    int i = 0;
    
    factor = _mm256_set1_pd(a); // Load scalar a into a SIMD register
        
    for (; i <= n - vec_size; i += vec_size)
    {
        vec1 = _mm256_loadu_pd(&b[i]); // Load 4 elements from array b
        vec2 = _mm256_loadu_pd(&d[i]); // Load 4 elements from array d
        
        // Perform SIMD calculation: e[i] = a * b[i] + c * d[i]
        vec1 = _mm256_mul_pd(factor, vec1); // Multiply a with b[i]
        vec2 = _mm256_mul_pd(_mm256_set1_pd(c), vec2); // Multiply c with d[i]
        vec2 = _mm256_add_pd(vec1, vec2); // Add the intermediate results
        
        _mm256_storeu_pd(&e[i], vec2); // Store the results in array e
    }
    
    for (; i < n; i++)
    {
        e[i] = a * b[i] + c * d[i]; // Handle the remaining elements
    }
}
